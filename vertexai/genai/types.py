# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Code generated by the Google Gen AI SDK generator DO NOT EDIT.

import logging
import typing
from typing import Any, Optional, Union
from google.genai import _common
from pydantic import Field
from typing_extensions import TypedDict

logger = logging.getLogger('google_genai.types')

T = typing.TypeVar('T', bound='GenerateContentResponse')


class HttpOptions(_common.BaseModel):
  """HTTP options to be used in each of the requests."""

  base_url: Optional[str] = Field(
      default=None,
      description="""The base URL for the AI platform service endpoint.""",
  )
  api_version: Optional[str] = Field(
      default=None, description="""Specifies the version of the API to use."""
  )
  headers: Optional[dict[str, str]] = Field(
      default=None,
      description="""Additional HTTP headers to be sent with the request.""",
  )
  timeout: Optional[int] = Field(
      default=None, description="""Timeout for the request in milliseconds."""
  )


class HttpOptionsDict(TypedDict, total=False):
  """HTTP options to be used in each of the requests."""

  base_url: Optional[str]
  """The base URL for the AI platform service endpoint."""

  api_version: Optional[str]
  """Specifies the version of the API to use."""

  headers: Optional[dict[str, str]]
  """Additional HTTP headers to be sent with the request."""

  timeout: Optional[int]
  """Timeout for the request in milliseconds."""


HttpOptionsOrDict = Union[HttpOptions, HttpOptionsDict]


class RequestResponseLoggingConfig(_common.BaseModel):
  """Optional configuration for request response logging."""

  default_enabled: Optional[bool] = Field(
      default=None,
      description="""If true(false), the logging is enabled(disabled) by default of any
      version which does not have an override.""",
  )


class RequestResponseLoggingConfigDict(TypedDict, total=False):
  """Optional configuration for request response logging."""

  default_enabled: Optional[bool]
  """If true(false), the logging is enabled(disabled) by default of any
      version which does not have an override."""


RequestResponseLoggingConfigOrDict = Union[
    RequestResponseLoggingConfig, RequestResponseLoggingConfigDict
]


class EndpointConfig(_common.BaseModel):
  """Optional configuration for set model."""

  http_options: Optional[HttpOptions] = Field(
      default=None, description="""Used to override HTTP request options."""
  )
  request_response_logging_config: Optional[RequestResponseLoggingConfig] = (
      Field(default=None, description="""Configuration for endpoint.""")
  )


class EndpointConfigDict(TypedDict, total=False):
  """Optional configuration for set model."""

  http_options: Optional[HttpOptionsDict]
  """Used to override HTTP request options."""

  request_response_logging_config: Optional[RequestResponseLoggingConfigDict]
  """Configuration for endpoint."""


EndpointConfigOrDict = Union[EndpointConfig, EndpointConfigDict]


class _SetEndpointConfigParameters(_common.BaseModel):
  """Parameters for set model."""

  name: Optional[str] = Field(
      default=None, description="""Name of the model."""
  )
  config: Optional[EndpointConfig] = Field(
      default=None,
      description="""Configuration that contains optional parameters.
      """,
  )


class _SetEndpointConfigParametersDict(TypedDict, total=False):
  """Parameters for set model."""

  name: Optional[str]
  """Name of the model."""

  config: Optional[EndpointConfigDict]
  """Configuration that contains optional parameters.
      """


_SetEndpointConfigParametersOrDict = Union[
    _SetEndpointConfigParameters, _SetEndpointConfigParametersDict
]


class Operation(_common.BaseModel):
  """A long-running operation."""

  name: Optional[str] = Field(
      default=None,
      description="""The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.""",
  )
  metadata: Optional[dict[str, Any]] = Field(
      default=None,
      description="""Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any.""",
  )
  done: Optional[bool] = Field(
      default=None,
      description="""If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.""",
  )
  error: Optional[dict[str, Any]] = Field(
      default=None,
      description="""The error result of the operation in case of failure or cancellation.""",
  )
  response: Optional[dict[str, Any]] = Field(
      default=None,
      description="""The normal response of the operation in case of success.""",
  )


class OperationDict(TypedDict, total=False):
  """A long-running operation."""

  name: Optional[str]
  """The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`."""

  metadata: Optional[dict[str, Any]]
  """Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata.  Any method that returns a long-running operation should document the metadata type, if any."""

  done: Optional[bool]
  """If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available."""

  error: Optional[dict[str, Any]]
  """The error result of the operation in case of failure or cancellation."""

  response: Optional[dict[str, Any]]
  """The normal response of the operation in case of success."""


OperationOrDict = Union[Operation, OperationDict]
