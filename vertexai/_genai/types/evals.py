# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Code generated by the Google Gen AI SDK generator DO NOT EDIT.

from typing import Optional, Union
from google.genai import _common
from google.genai import types as genai_types
from pydantic import Field
from typing_extensions import TypedDict


class AgentInfo(_common.BaseModel):
    """The agent info of an agent, used for agent eval."""

    agent: Optional[str] = Field(
        default=None,
        description="""The agent engine used to run agent. Agent engine resource name in str type, with format
            `projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine_id}`.""",
    )
    name: Optional[str] = Field(
        default=None, description="""Agent name, used as an identifier."""
    )
    instruction: Optional[str] = Field(
        default=None, description="""Agent developer instruction."""
    )
    description: Optional[str] = Field(
        default=None, description="""Agent description."""
    )
    tool_declarations: Optional[genai_types.ToolListUnion] = Field(
        default=None, description="""List of tools used by the Agent."""
    )


class AgentInfoDict(TypedDict, total=False):
    """The agent info of an agent, used for agent eval."""

    agent: Optional[str]
    """The agent engine used to run agent. Agent engine resource name in str type, with format
            `projects/{project}/locations/{location}/reasoningEngines/{reasoning_engine_id}`."""

    name: Optional[str]
    """Agent name, used as an identifier."""

    instruction: Optional[str]
    """Agent developer instruction."""

    description: Optional[str]
    """Agent description."""

    tool_declarations: Optional[genai_types.ToolListUnionDict]
    """List of tools used by the Agent."""


AgentInfoOrDict = Union[AgentInfo, AgentInfoDict]


class Tools(_common.BaseModel):
    """Represents a list of tools for an agent."""

    tool: Optional[list[genai_types.Tool]] = Field(
        default=None,
        description="""List of tools: each tool can have multiple function declarations.""",
    )


class ToolsDict(TypedDict, total=False):
    """Represents a list of tools for an agent."""

    tool: Optional[list[genai_types.ToolDict]]
    """List of tools: each tool can have multiple function declarations."""


ToolsOrDict = Union[Tools, ToolsDict]


class InstanceDataContents(_common.BaseModel):
    """List of standard Content messages from Gemini API."""

    contents: Optional[list[genai_types.Content]] = Field(
        default=None, description="""Repeated contents."""
    )


class InstanceDataContentsDict(TypedDict, total=False):
    """List of standard Content messages from Gemini API."""

    contents: Optional[list[genai_types.ContentDict]]
    """Repeated contents."""


InstanceDataContentsOrDict = Union[InstanceDataContents, InstanceDataContentsDict]


class InstanceData(_common.BaseModel):
    """Instance data used to populate placeholders in a metric prompt template."""

    text: Optional[str] = Field(default=None, description="""Text data.""")
    contents: Optional[InstanceDataContents] = Field(
        default=None, description="""List of Gemini content data."""
    )


class InstanceDataDict(TypedDict, total=False):
    """Instance data used to populate placeholders in a metric prompt template."""

    text: Optional[str]
    """Text data."""

    contents: Optional[InstanceDataContentsDict]
    """List of Gemini content data."""


InstanceDataOrDict = Union[InstanceData, InstanceDataDict]


class AgentConfig(_common.BaseModel):
    """Configuration for an Agent."""

    tools_text: Optional[str] = Field(
        default=None,
        description="""A JSON string containing a list of tools available to an agent.""",
    )
    tools: Optional[Tools] = Field(default=None, description="""List of tools.""")
    developer_instruction: Optional[InstanceData] = Field(
        default=None,
        description="""A field containing instructions from the developer for the agent.""",
    )


class AgentConfigDict(TypedDict, total=False):
    """Configuration for an Agent."""

    tools_text: Optional[str]
    """A JSON string containing a list of tools available to an agent."""

    tools: Optional[ToolsDict]
    """List of tools."""

    developer_instruction: Optional[InstanceDataDict]
    """A field containing instructions from the developer for the agent."""


AgentConfigOrDict = Union[AgentConfig, AgentConfigDict]


class Events(_common.BaseModel):
    """Represents a list of events for an agent."""

    event: Optional[list[genai_types.Content]] = Field(
        default=None, description="""A list of events."""
    )


class EventsDict(TypedDict, total=False):
    """Represents a list of events for an agent."""

    event: Optional[list[genai_types.ContentDict]]
    """A list of events."""


EventsOrDict = Union[Events, EventsDict]


class AgentData(_common.BaseModel):
    """Contains data specific to agent evaluations."""

    agent_config: Optional[AgentConfig] = Field(
        default=None, description="""Agent configuration."""
    )
    events_text: Optional[str] = Field(
        default=None, description="""A JSON string containing a sequence of events."""
    )
    events: Optional[Events] = Field(default=None, description="""A list of events.""")


class AgentDataDict(TypedDict, total=False):
    """Contains data specific to agent evaluations."""

    agent_config: Optional[AgentConfigDict]
    """Agent configuration."""

    events_text: Optional[str]
    """A JSON string containing a sequence of events."""

    events: Optional[EventsDict]
    """A list of events."""


AgentDataOrDict = Union[AgentData, AgentDataDict]
